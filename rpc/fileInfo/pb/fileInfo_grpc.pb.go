// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: fileInfo.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileInfo_PreviewFile_FullMethodName = "/fileInfo.FileInfo/PreviewFile"
	FileInfo_GetFileInfo_FullMethodName = "/fileInfo.FileInfo/GetFileInfo"
)

// FileInfoClient is the client API for FileInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileInfoClient interface {
	PreviewFile(ctx context.Context, in *PreviewFileRequest, opts ...grpc.CallOption) (*PreviewFileResponse, error)
	GetFileInfo(ctx context.Context, in *GetFileInfoRequest, opts ...grpc.CallOption) (*GetFileInfoResponse, error)
}

type fileInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewFileInfoClient(cc grpc.ClientConnInterface) FileInfoClient {
	return &fileInfoClient{cc}
}

func (c *fileInfoClient) PreviewFile(ctx context.Context, in *PreviewFileRequest, opts ...grpc.CallOption) (*PreviewFileResponse, error) {
	out := new(PreviewFileResponse)
	err := c.cc.Invoke(ctx, FileInfo_PreviewFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileInfoClient) GetFileInfo(ctx context.Context, in *GetFileInfoRequest, opts ...grpc.CallOption) (*GetFileInfoResponse, error) {
	out := new(GetFileInfoResponse)
	err := c.cc.Invoke(ctx, FileInfo_GetFileInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileInfoServer is the server API for FileInfo service.
// All implementations must embed UnimplementedFileInfoServer
// for forward compatibility
type FileInfoServer interface {
	PreviewFile(context.Context, *PreviewFileRequest) (*PreviewFileResponse, error)
	GetFileInfo(context.Context, *GetFileInfoRequest) (*GetFileInfoResponse, error)
	mustEmbedUnimplementedFileInfoServer()
}

// UnimplementedFileInfoServer must be embedded to have forward compatible implementations.
type UnimplementedFileInfoServer struct {
}

func (UnimplementedFileInfoServer) PreviewFile(context.Context, *PreviewFileRequest) (*PreviewFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewFile not implemented")
}
func (UnimplementedFileInfoServer) GetFileInfo(context.Context, *GetFileInfoRequest) (*GetFileInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileInfo not implemented")
}
func (UnimplementedFileInfoServer) mustEmbedUnimplementedFileInfoServer() {}

// UnsafeFileInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileInfoServer will
// result in compilation errors.
type UnsafeFileInfoServer interface {
	mustEmbedUnimplementedFileInfoServer()
}

func RegisterFileInfoServer(s grpc.ServiceRegistrar, srv FileInfoServer) {
	s.RegisterService(&FileInfo_ServiceDesc, srv)
}

func _FileInfo_PreviewFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileInfoServer).PreviewFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileInfo_PreviewFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileInfoServer).PreviewFile(ctx, req.(*PreviewFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileInfo_GetFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileInfoServer).GetFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileInfo_GetFileInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileInfoServer).GetFileInfo(ctx, req.(*GetFileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileInfo_ServiceDesc is the grpc.ServiceDesc for FileInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fileInfo.FileInfo",
	HandlerType: (*FileInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PreviewFile",
			Handler:    _FileInfo_PreviewFile_Handler,
		},
		{
			MethodName: "GetFileInfo",
			Handler:    _FileInfo_GetFileInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fileInfo.proto",
}
